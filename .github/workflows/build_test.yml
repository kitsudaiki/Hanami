name: build-and-test
on: [push]

jobs:
  clang-format-check:
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/ci-check:0.2.0
    name: "clang-format check"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "ls"
        run: ls -l
      - name: "Run tests"
        run: |
          find . -regex '.*\.\(h$\|c$\|hpp$\|cpp$\)' | while read f
          do
              clang-format-15 -style=file:.clang-format --dry-run --Werror $f
              if [ $? -ne 0 ]
              then
                  exit 1
              fi
          done

  cpp-check:
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/ci-check:0.2.0
    name: "cppcheck"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "ls"
        run: ls -l
      - name: "Run tests"
        run: |
           cppcheck --error-exitcode=1 src/Hanami
           cppcheck --error-exitcode=1 src/libraries

  build:
    needs: [ cpp-check, clang-format-check ]
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/hanami_builder:0.6.1
    name: "build repository"
    steps:
      - name: "Checkout repository"
        run: |
          # use manually clone, because with the "actions/checkout@v3" action the name of the
          # branch can not be read by the git commands, which is necessary for the build-script
          git clone https://github.com/kitsudaiki/${GITHUB_REPOSITORY#*/}.git
          cd ${GITHUB_REPOSITORY#*/}
          git checkout ${GITHUB_REF#refs/heads/}
          git submodule init
          git submodule update --recursive
      - name: "Build project"
        run:  |
          cd ${GITHUB_REPOSITORY#*/}
          ./build.sh test
      - name: "Copy files"
        run: |
          mkdir /build_result
          cd ${GITHUB_REPOSITORY#*/}
          # Workaround, because I hadn'd found a way to define a build-target directory when using plain qmake and make
          # and keeping all files in the directory is horrible slow in the articats
          find ./src/ -type f -name "*.cpp" -exec rm {} \;
          find ./src/ -type f -name "*.h" -exec rm {} \;
          find ./src/ -type f -name "*.o" -exec rm {} \;
          find ./src/ -type f -name "*.a" -exec rm {} \;
          cp -r src/* /build_result/
      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: result
          path: /build_result

  unit_tests:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/hanami_base:develop
    name: "Unit-Tests"
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: result
          path: /build_result
      - name: "Check target-directory"
        run: ls -l /build_result
      - name: "Run test: hanami_common"
        run: |
          chmod +x /build_result/libraries/hanami_common/tests/unit_tests/hanami_common_unit_tests
          /build_result/libraries/hanami_common/tests/unit_tests/hanami_common_unit_tests
      - name: "Run test: hanami_config"
        run: |
          chmod +x /build_result/libraries/hanami_config/tests/unit_tests/hanami_config_unit_tests
          /build_result/libraries/hanami_config/tests/unit_tests/hanami_config_unit_tests
      - name: "Run test: hanami_crypto"
        run: |
          chmod +x /build_result/libraries/hanami_crypto/tests/unit_tests/hanami_crypto_unit_tests
          /build_result/libraries/hanami_crypto/tests/unit_tests/hanami_crypto_unit_tests
      - name: "Run test: hanami_ini"
        run: |
          chmod +x /build_result/libraries/hanami_ini/tests/unit_tests/hanami_ini_unit_tests
          /build_result/libraries/hanami_ini/tests/unit_tests/hanami_ini_unit_tests
      - name: "Run test: hanami_sqlite"
        run: |
          chmod +x /build_result/libraries/hanami_sqlite/tests/unit_tests/hanami_sqlite_unit_tests
          /build_result/libraries/hanami_sqlite/tests/unit_tests/hanami_sqlite_unit_tests
      - name: "Run test: hanami_cluster_parser"
        run: |
          chmod +x /build_result/libraries/hanami_cluster_parser/tests/unit_tests/hanami_cluster_parser_unit_tests
          /build_result/libraries/hanami_cluster_parser/tests/unit_tests/hanami_cluster_parser_unit_tests
      - name: "Run test: hanami_policies"
        run: |
          chmod +x /build_result/libraries/hanami_policies/tests/unit_tests/hanami_policies_unit_tests
          /build_result/libraries/hanami_policies/tests/unit_tests/hanami_policies_unit_tests
      - name: "Run test: hanami_args"
        run: |
          chmod +x /build_result/libraries/hanami_args/tests/unit_tests/hanami_args_unit_tests
          /build_result/libraries/hanami_args/tests/unit_tests/hanami_args_unit_tests

  memory_leak_tests:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/hanami_base:develop
    name: "Memory-Leak-Tests"
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: result
          path: /build_result
      - name: "Check target-directory"
        run: ls -l /build_result
      - name: "Run test: hanami_common"
        run: |
          chmod +x /build_result/libraries/hanami_common/tests/memory_leak_tests/hanami_common_memory_leak_tests
          /build_result/libraries/hanami_common/tests/memory_leak_tests/hanami_common_memory_leak_tests
      - name: "Run test: hanami_cluster_parser"
        run: |
          chmod +x /build_result/libraries/hanami_cluster_parser/tests/memory_leak_tests/hanami_cluster_parser_memory_leak_tests
          /build_result/libraries/hanami_cluster_parser/tests/memory_leak_tests/hanami_cluster_parser_memory_leak_tests


  functional_tests:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: kitsudaiki/hanami_base:develop
    name: "Functional-Tests"
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: result
          path: /build_result
      - name: "Check target-directory"
        run: ls -l /build_result
      - name: "Run test: hanami_config"
        run: |
          chmod +x /build_result/libraries/hanami_config/tests/functional_tests/hanami_config_functional_tests
          /build_result/libraries/hanami_config/tests/functional_tests/hanami_config_functional_tests
      # - name: "Run test: hanami_obj"
      #   run: |
      #     chmod +x /build_result/libraries/hanami_obj/tests/functional_tests/functional_tests
      #     /build_result/libraries/hanami_obj/tests/functional_tests/functional_tests
      - name: "Run test: hanami_database"
        run: |
          chmod +x /build_result/libraries/hanami_database/tests/functional_tests/hanami_database_functional_tests
          /build_result/libraries/hanami_database/tests/functional_tests/hanami_database_functional_tests
      # - name: "Run test: hanami_network"
      #   run: |
      #     chmod +x /build_result/libraries/hanami_network/tests/functional_tests/functional_tests
      #     /build_result/libraries/hanami_network/tests/functional_tests/functional_tests

  cleanup:
    needs: [ unit_tests, memory_leak_tests, functional_tests ]
    runs-on: ubuntu-latest
    name: cleanup-job
    steps:
      - name: "Delete artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          name: result
