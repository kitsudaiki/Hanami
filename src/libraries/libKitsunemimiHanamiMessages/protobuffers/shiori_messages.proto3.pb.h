// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shiori_messages.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shiori_5fmessages_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shiori_5fmessages_2eproto3 {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shiori_5fmessages_2eproto3;
class AuditLog_Message;
class AuditLog_MessageDefaultTypeInternal;
extern AuditLog_MessageDefaultTypeInternal _AuditLog_Message_default_instance_;
class ClusterSnapshotPull_Message;
class ClusterSnapshotPull_MessageDefaultTypeInternal;
extern ClusterSnapshotPull_MessageDefaultTypeInternal _ClusterSnapshotPull_Message_default_instance_;
class DatasetRequest_Message;
class DatasetRequest_MessageDefaultTypeInternal;
extern DatasetRequest_MessageDefaultTypeInternal _DatasetRequest_Message_default_instance_;
class ErrorLog_Message;
class ErrorLog_MessageDefaultTypeInternal;
extern ErrorLog_MessageDefaultTypeInternal _ErrorLog_Message_default_instance_;
class FileUploadResponse_Message;
class FileUploadResponse_MessageDefaultTypeInternal;
extern FileUploadResponse_MessageDefaultTypeInternal _FileUploadResponse_Message_default_instance_;
class FileUpload_Message;
class FileUpload_MessageDefaultTypeInternal;
extern FileUpload_MessageDefaultTypeInternal _FileUpload_Message_default_instance_;
class ResultPush_Message;
class ResultPush_MessageDefaultTypeInternal;
extern ResultPush_MessageDefaultTypeInternal _ResultPush_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AuditLog_Message* Arena::CreateMaybeMessage<::AuditLog_Message>(Arena*);
template<> ::ClusterSnapshotPull_Message* Arena::CreateMaybeMessage<::ClusterSnapshotPull_Message>(Arena*);
template<> ::DatasetRequest_Message* Arena::CreateMaybeMessage<::DatasetRequest_Message>(Arena*);
template<> ::ErrorLog_Message* Arena::CreateMaybeMessage<::ErrorLog_Message>(Arena*);
template<> ::FileUploadResponse_Message* Arena::CreateMaybeMessage<::FileUploadResponse_Message>(Arena*);
template<> ::FileUpload_Message* Arena::CreateMaybeMessage<::FileUpload_Message>(Arena*);
template<> ::ResultPush_Message* Arena::CreateMaybeMessage<::ResultPush_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum UploadDataType : int {
  DATASET_TYPE = 0,
  CLUSTER_SNAPSHOT_TYPE = 1,
  UploadDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UploadDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UploadDataType_IsValid(int value);
constexpr UploadDataType UploadDataType_MIN = DATASET_TYPE;
constexpr UploadDataType UploadDataType_MAX = CLUSTER_SNAPSHOT_TYPE;
constexpr int UploadDataType_ARRAYSIZE = UploadDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadDataType_descriptor();
template<typename T>
inline const std::string& UploadDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UploadDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UploadDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UploadDataType_descriptor(), enum_t_value);
}
inline bool UploadDataType_Parse(
    const std::string& name, UploadDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UploadDataType>(
    UploadDataType_descriptor(), name, value);
}
// ===================================================================

class FileUpload_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUpload_Message) */ {
 public:
  inline FileUpload_Message() : FileUpload_Message(nullptr) {};
  virtual ~FileUpload_Message();

  FileUpload_Message(const FileUpload_Message& from);
  FileUpload_Message(FileUpload_Message&& from) noexcept
    : FileUpload_Message() {
    *this = ::std::move(from);
  }

  inline FileUpload_Message& operator=(const FileUpload_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpload_Message& operator=(FileUpload_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUpload_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUpload_Message* internal_default_instance() {
    return reinterpret_cast<const FileUpload_Message*>(
               &_FileUpload_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileUpload_Message& a, FileUpload_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpload_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpload_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUpload_Message* New() const final {
    return CreateMaybeMessage<FileUpload_Message>(nullptr);
  }

  FileUpload_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUpload_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUpload_Message& from);
  void MergeFrom(const FileUpload_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpload_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUpload_Message";
  }
  protected:
  explicit FileUpload_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetUuidFieldNumber = 1,
    kFileUuidFieldNumber = 2,
    kDataFieldNumber = 6,
    kIsLastFieldNumber = 3,
    kTypeFieldNumber = 4,
    kPositionFieldNumber = 5,
  };
  // string datasetUuid = 1;
  void clear_datasetuuid();
  const std::string& datasetuuid() const;
  void set_datasetuuid(const std::string& value);
  void set_datasetuuid(std::string&& value);
  void set_datasetuuid(const char* value);
  void set_datasetuuid(const char* value, size_t size);
  std::string* mutable_datasetuuid();
  std::string* release_datasetuuid();
  void set_allocated_datasetuuid(std::string* datasetuuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasetuuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasetuuid(
      std::string* datasetuuid);
  private:
  const std::string& _internal_datasetuuid() const;
  void _internal_set_datasetuuid(const std::string& value);
  std::string* _internal_mutable_datasetuuid();
  public:

  // string fileUuid = 2;
  void clear_fileuuid();
  const std::string& fileuuid() const;
  void set_fileuuid(const std::string& value);
  void set_fileuuid(std::string&& value);
  void set_fileuuid(const char* value);
  void set_fileuuid(const char* value, size_t size);
  std::string* mutable_fileuuid();
  std::string* release_fileuuid();
  void set_allocated_fileuuid(std::string* fileuuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fileuuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fileuuid(
      std::string* fileuuid);
  private:
  const std::string& _internal_fileuuid() const;
  void _internal_set_fileuuid(const std::string& value);
  std::string* _internal_mutable_fileuuid();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool isLast = 3;
  void clear_islast();
  bool islast() const;
  void set_islast(bool value);
  private:
  bool _internal_islast() const;
  void _internal_set_islast(bool value);
  public:

  // .UploadDataType type = 4;
  void clear_type();
  ::UploadDataType type() const;
  void set_type(::UploadDataType value);
  private:
  ::UploadDataType _internal_type() const;
  void _internal_set_type(::UploadDataType value);
  public:

  // uint64 position = 5;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FileUpload_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasetuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileuuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool islast_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class FileUploadResponse_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileUploadResponse_Message) */ {
 public:
  inline FileUploadResponse_Message() : FileUploadResponse_Message(nullptr) {};
  virtual ~FileUploadResponse_Message();

  FileUploadResponse_Message(const FileUploadResponse_Message& from);
  FileUploadResponse_Message(FileUploadResponse_Message&& from) noexcept
    : FileUploadResponse_Message() {
    *this = ::std::move(from);
  }

  inline FileUploadResponse_Message& operator=(const FileUploadResponse_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadResponse_Message& operator=(FileUploadResponse_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUploadResponse_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUploadResponse_Message* internal_default_instance() {
    return reinterpret_cast<const FileUploadResponse_Message*>(
               &_FileUploadResponse_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileUploadResponse_Message& a, FileUploadResponse_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadResponse_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadResponse_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUploadResponse_Message* New() const final {
    return CreateMaybeMessage<FileUploadResponse_Message>(nullptr);
  }

  FileUploadResponse_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUploadResponse_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUploadResponse_Message& from);
  void MergeFrom(const FileUploadResponse_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadResponse_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileUploadResponse_Message";
  }
  protected:
  explicit FileUploadResponse_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetUuidFieldNumber = 1,
  };
  // string datasetUuid = 1;
  void clear_datasetuuid();
  const std::string& datasetuuid() const;
  void set_datasetuuid(const std::string& value);
  void set_datasetuuid(std::string&& value);
  void set_datasetuuid(const char* value);
  void set_datasetuuid(const char* value, size_t size);
  std::string* mutable_datasetuuid();
  std::string* release_datasetuuid();
  void set_allocated_datasetuuid(std::string* datasetuuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datasetuuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datasetuuid(
      std::string* datasetuuid);
  private:
  const std::string& _internal_datasetuuid() const;
  void _internal_set_datasetuuid(const std::string& value);
  std::string* _internal_mutable_datasetuuid();
  public:

  // @@protoc_insertion_point(class_scope:FileUploadResponse_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasetuuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class ErrorLog_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ErrorLog_Message) */ {
 public:
  inline ErrorLog_Message() : ErrorLog_Message(nullptr) {};
  virtual ~ErrorLog_Message();

  ErrorLog_Message(const ErrorLog_Message& from);
  ErrorLog_Message(ErrorLog_Message&& from) noexcept
    : ErrorLog_Message() {
    *this = ::std::move(from);
  }

  inline ErrorLog_Message& operator=(const ErrorLog_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorLog_Message& operator=(ErrorLog_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorLog_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorLog_Message* internal_default_instance() {
    return reinterpret_cast<const ErrorLog_Message*>(
               &_ErrorLog_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErrorLog_Message& a, ErrorLog_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorLog_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorLog_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorLog_Message* New() const final {
    return CreateMaybeMessage<ErrorLog_Message>(nullptr);
  }

  ErrorLog_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorLog_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorLog_Message& from);
  void MergeFrom(const ErrorLog_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorLog_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ErrorLog_Message";
  }
  protected:
  explicit ErrorLog_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kComponentFieldNumber = 2,
    kErrorMsgFieldNumber = 3,
    kContextFieldNumber = 4,
    kValuesFieldNumber = 5,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string component = 2;
  void clear_component();
  const std::string& component() const;
  void set_component(const std::string& value);
  void set_component(std::string&& value);
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  std::string* mutable_component();
  std::string* release_component();
  void set_allocated_component(std::string* component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component(
      std::string* component);
  private:
  const std::string& _internal_component() const;
  void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // string errorMsg = 3;
  void clear_errormsg();
  const std::string& errormsg() const;
  void set_errormsg(const std::string& value);
  void set_errormsg(std::string&& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  std::string* mutable_errormsg();
  std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errormsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errormsg(
      std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // string context = 4;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_context();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_context(
      std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // string values = 5;
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_values();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_values(
      std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:ErrorLog_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class AuditLog_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuditLog_Message) */ {
 public:
  inline AuditLog_Message() : AuditLog_Message(nullptr) {};
  virtual ~AuditLog_Message();

  AuditLog_Message(const AuditLog_Message& from);
  AuditLog_Message(AuditLog_Message&& from) noexcept
    : AuditLog_Message() {
    *this = ::std::move(from);
  }

  inline AuditLog_Message& operator=(const AuditLog_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuditLog_Message& operator=(AuditLog_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuditLog_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditLog_Message* internal_default_instance() {
    return reinterpret_cast<const AuditLog_Message*>(
               &_AuditLog_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuditLog_Message& a, AuditLog_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(AuditLog_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuditLog_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuditLog_Message* New() const final {
    return CreateMaybeMessage<AuditLog_Message>(nullptr);
  }

  AuditLog_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuditLog_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuditLog_Message& from);
  void MergeFrom(const AuditLog_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditLog_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuditLog_Message";
  }
  protected:
  explicit AuditLog_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kComponentFieldNumber = 2,
    kEndpointFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string component = 2;
  void clear_component();
  const std::string& component() const;
  void set_component(const std::string& value);
  void set_component(std::string&& value);
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  std::string* mutable_component();
  std::string* release_component();
  void set_allocated_component(std::string* component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component(
      std::string* component);
  private:
  const std::string& _internal_component() const;
  void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // string endpoint = 3;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endpoint(
      std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:AuditLog_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class ClusterSnapshotPull_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClusterSnapshotPull_Message) */ {
 public:
  inline ClusterSnapshotPull_Message() : ClusterSnapshotPull_Message(nullptr) {};
  virtual ~ClusterSnapshotPull_Message();

  ClusterSnapshotPull_Message(const ClusterSnapshotPull_Message& from);
  ClusterSnapshotPull_Message(ClusterSnapshotPull_Message&& from) noexcept
    : ClusterSnapshotPull_Message() {
    *this = ::std::move(from);
  }

  inline ClusterSnapshotPull_Message& operator=(const ClusterSnapshotPull_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterSnapshotPull_Message& operator=(ClusterSnapshotPull_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterSnapshotPull_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterSnapshotPull_Message* internal_default_instance() {
    return reinterpret_cast<const ClusterSnapshotPull_Message*>(
               &_ClusterSnapshotPull_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClusterSnapshotPull_Message& a, ClusterSnapshotPull_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterSnapshotPull_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterSnapshotPull_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterSnapshotPull_Message* New() const final {
    return CreateMaybeMessage<ClusterSnapshotPull_Message>(nullptr);
  }

  ClusterSnapshotPull_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterSnapshotPull_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterSnapshotPull_Message& from);
  void MergeFrom(const ClusterSnapshotPull_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterSnapshotPull_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClusterSnapshotPull_Message";
  }
  protected:
  explicit ClusterSnapshotPull_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // string location = 1;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location(
      std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:ClusterSnapshotPull_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class DatasetRequest_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DatasetRequest_Message) */ {
 public:
  inline DatasetRequest_Message() : DatasetRequest_Message(nullptr) {};
  virtual ~DatasetRequest_Message();

  DatasetRequest_Message(const DatasetRequest_Message& from);
  DatasetRequest_Message(DatasetRequest_Message&& from) noexcept
    : DatasetRequest_Message() {
    *this = ::std::move(from);
  }

  inline DatasetRequest_Message& operator=(const DatasetRequest_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetRequest_Message& operator=(DatasetRequest_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatasetRequest_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetRequest_Message* internal_default_instance() {
    return reinterpret_cast<const DatasetRequest_Message*>(
               &_DatasetRequest_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DatasetRequest_Message& a, DatasetRequest_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetRequest_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetRequest_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatasetRequest_Message* New() const final {
    return CreateMaybeMessage<DatasetRequest_Message>(nullptr);
  }

  DatasetRequest_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatasetRequest_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatasetRequest_Message& from);
  void MergeFrom(const DatasetRequest_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetRequest_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DatasetRequest_Message";
  }
  protected:
  explicit DatasetRequest_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // string location = 1;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location(
      std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string columnName = 2;
  void clear_columnname();
  const std::string& columnname() const;
  void set_columnname(const std::string& value);
  void set_columnname(std::string&& value);
  void set_columnname(const char* value);
  void set_columnname(const char* value, size_t size);
  std::string* mutable_columnname();
  std::string* release_columnname();
  void set_allocated_columnname(std::string* columnname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_columnname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_columnname(
      std::string* columnname);
  private:
  const std::string& _internal_columnname() const;
  void _internal_set_columnname(const std::string& value);
  std::string* _internal_mutable_columnname();
  public:

  // @@protoc_insertion_point(class_scope:DatasetRequest_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// -------------------------------------------------------------------

class ResultPush_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResultPush_Message) */ {
 public:
  inline ResultPush_Message() : ResultPush_Message(nullptr) {};
  virtual ~ResultPush_Message();

  ResultPush_Message(const ResultPush_Message& from);
  ResultPush_Message(ResultPush_Message&& from) noexcept
    : ResultPush_Message() {
    *this = ::std::move(from);
  }

  inline ResultPush_Message& operator=(const ResultPush_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultPush_Message& operator=(ResultPush_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultPush_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultPush_Message* internal_default_instance() {
    return reinterpret_cast<const ResultPush_Message*>(
               &_ResultPush_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResultPush_Message& a, ResultPush_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultPush_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultPush_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultPush_Message* New() const final {
    return CreateMaybeMessage<ResultPush_Message>(nullptr);
  }

  ResultPush_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultPush_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultPush_Message& from);
  void MergeFrom(const ResultPush_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultPush_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResultPush_Message";
  }
  protected:
  explicit ResultPush_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shiori_5fmessages_2eproto3);
    return ::descriptor_table_shiori_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kResultsFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string userId = 3;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string projectId = 4;
  void clear_projectid();
  const std::string& projectid() const;
  void set_projectid(const std::string& value);
  void set_projectid(std::string&& value);
  void set_projectid(const char* value);
  void set_projectid(const char* value, size_t size);
  std::string* mutable_projectid();
  std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_projectid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_projectid(
      std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // string results = 5;
  void clear_results();
  const std::string& results() const;
  void set_results(const std::string& value);
  void set_results(std::string&& value);
  void set_results(const char* value);
  void set_results(const char* value, size_t size);
  std::string* mutable_results();
  std::string* release_results();
  void set_allocated_results(std::string* results);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_results();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_results(
      std::string* results);
  private:
  const std::string& _internal_results() const;
  void _internal_set_results(const std::string& value);
  std::string* _internal_mutable_results();
  public:

  // @@protoc_insertion_point(class_scope:ResultPush_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shiori_5fmessages_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUpload_Message

// string datasetUuid = 1;
inline void FileUpload_Message::clear_datasetuuid() {
  datasetuuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::datasetuuid() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.datasetUuid)
  return _internal_datasetuuid();
}
inline void FileUpload_Message::set_datasetuuid(const std::string& value) {
  _internal_set_datasetuuid(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::mutable_datasetuuid() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.datasetUuid)
  return _internal_mutable_datasetuuid();
}
inline const std::string& FileUpload_Message::_internal_datasetuuid() const {
  return datasetuuid_.Get();
}
inline void FileUpload_Message::_internal_set_datasetuuid(const std::string& value) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_datasetuuid(std::string&& value) {
  
  datasetuuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.datasetUuid)
}
inline void FileUpload_Message::set_datasetuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.datasetUuid)
}
inline void FileUpload_Message::set_datasetuuid(const char* value,
    size_t size) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::_internal_mutable_datasetuuid() {
  
  return datasetuuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_datasetuuid() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.datasetUuid)
  return datasetuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_datasetuuid(std::string* datasetuuid) {
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasetuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.datasetUuid)
}
inline std::string* FileUpload_Message::unsafe_arena_release_datasetuuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.datasetUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasetuuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_datasetuuid(
    std::string* datasetuuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasetuuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.datasetUuid)
}

// string fileUuid = 2;
inline void FileUpload_Message::clear_fileuuid() {
  fileuuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::fileuuid() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.fileUuid)
  return _internal_fileuuid();
}
inline void FileUpload_Message::set_fileuuid(const std::string& value) {
  _internal_set_fileuuid(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::mutable_fileuuid() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.fileUuid)
  return _internal_mutable_fileuuid();
}
inline const std::string& FileUpload_Message::_internal_fileuuid() const {
  return fileuuid_.Get();
}
inline void FileUpload_Message::_internal_set_fileuuid(const std::string& value) {
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_fileuuid(std::string&& value) {
  
  fileuuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.fileUuid)
}
inline void FileUpload_Message::set_fileuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.fileUuid)
}
inline void FileUpload_Message::set_fileuuid(const char* value,
    size_t size) {
  
  fileuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::_internal_mutable_fileuuid() {
  
  return fileuuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_fileuuid() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.fileUuid)
  return fileuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_fileuuid(std::string* fileuuid) {
  if (fileuuid != nullptr) {
    
  } else {
    
  }
  fileuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.fileUuid)
}
inline std::string* FileUpload_Message::unsafe_arena_release_fileuuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.fileUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fileuuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_fileuuid(
    std::string* fileuuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fileuuid != nullptr) {
    
  } else {
    
  }
  fileuuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fileuuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.fileUuid)
}

// bool isLast = 3;
inline void FileUpload_Message::clear_islast() {
  islast_ = false;
}
inline bool FileUpload_Message::_internal_islast() const {
  return islast_;
}
inline bool FileUpload_Message::islast() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.isLast)
  return _internal_islast();
}
inline void FileUpload_Message::_internal_set_islast(bool value) {
  
  islast_ = value;
}
inline void FileUpload_Message::set_islast(bool value) {
  _internal_set_islast(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.isLast)
}

// .UploadDataType type = 4;
inline void FileUpload_Message::clear_type() {
  type_ = 0;
}
inline ::UploadDataType FileUpload_Message::_internal_type() const {
  return static_cast< ::UploadDataType >(type_);
}
inline ::UploadDataType FileUpload_Message::type() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.type)
  return _internal_type();
}
inline void FileUpload_Message::_internal_set_type(::UploadDataType value) {
  
  type_ = value;
}
inline void FileUpload_Message::set_type(::UploadDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.type)
}

// uint64 position = 5;
inline void FileUpload_Message::clear_position() {
  position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUpload_Message::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileUpload_Message::position() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.position)
  return _internal_position();
}
inline void FileUpload_Message::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  position_ = value;
}
inline void FileUpload_Message::set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.position)
}

// bytes data = 6;
inline void FileUpload_Message::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload_Message::data() const {
  // @@protoc_insertion_point(field_get:FileUpload_Message.data)
  return _internal_data();
}
inline void FileUpload_Message::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FileUpload_Message.data)
  return _internal_mutable_data();
}
inline const std::string& FileUpload_Message::_internal_data() const {
  return data_.Get();
}
inline void FileUpload_Message::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload_Message::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUpload_Message.data)
}
inline void FileUpload_Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUpload_Message.data)
}
inline void FileUpload_Message::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload_Message::release_data() {
  // @@protoc_insertion_point(field_release:FileUpload_Message.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload_Message::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUpload_Message.data)
}
inline std::string* FileUpload_Message::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUpload_Message.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUpload_Message::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUpload_Message.data)
}

// -------------------------------------------------------------------

// FileUploadResponse_Message

// string datasetUuid = 1;
inline void FileUploadResponse_Message::clear_datasetuuid() {
  datasetuuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUploadResponse_Message::datasetuuid() const {
  // @@protoc_insertion_point(field_get:FileUploadResponse_Message.datasetUuid)
  return _internal_datasetuuid();
}
inline void FileUploadResponse_Message::set_datasetuuid(const std::string& value) {
  _internal_set_datasetuuid(value);
  // @@protoc_insertion_point(field_set:FileUploadResponse_Message.datasetUuid)
}
inline std::string* FileUploadResponse_Message::mutable_datasetuuid() {
  // @@protoc_insertion_point(field_mutable:FileUploadResponse_Message.datasetUuid)
  return _internal_mutable_datasetuuid();
}
inline const std::string& FileUploadResponse_Message::_internal_datasetuuid() const {
  return datasetuuid_.Get();
}
inline void FileUploadResponse_Message::_internal_set_datasetuuid(const std::string& value) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUploadResponse_Message::set_datasetuuid(std::string&& value) {
  
  datasetuuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileUploadResponse_Message.datasetUuid)
}
inline void FileUploadResponse_Message::set_datasetuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileUploadResponse_Message.datasetUuid)
}
inline void FileUploadResponse_Message::set_datasetuuid(const char* value,
    size_t size) {
  
  datasetuuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileUploadResponse_Message.datasetUuid)
}
inline std::string* FileUploadResponse_Message::_internal_mutable_datasetuuid() {
  
  return datasetuuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUploadResponse_Message::release_datasetuuid() {
  // @@protoc_insertion_point(field_release:FileUploadResponse_Message.datasetUuid)
  return datasetuuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUploadResponse_Message::set_allocated_datasetuuid(std::string* datasetuuid) {
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasetuuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileUploadResponse_Message.datasetUuid)
}
inline std::string* FileUploadResponse_Message::unsafe_arena_release_datasetuuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileUploadResponse_Message.datasetUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return datasetuuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileUploadResponse_Message::unsafe_arena_set_allocated_datasetuuid(
    std::string* datasetuuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datasetuuid != nullptr) {
    
  } else {
    
  }
  datasetuuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datasetuuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileUploadResponse_Message.datasetUuid)
}

// -------------------------------------------------------------------

// ErrorLog_Message

// string userId = 1;
inline void ErrorLog_Message::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorLog_Message::userid() const {
  // @@protoc_insertion_point(field_get:ErrorLog_Message.userId)
  return _internal_userid();
}
inline void ErrorLog_Message::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ErrorLog_Message.userId)
}
inline std::string* ErrorLog_Message::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:ErrorLog_Message.userId)
  return _internal_mutable_userid();
}
inline const std::string& ErrorLog_Message::_internal_userid() const {
  return userid_.Get();
}
inline void ErrorLog_Message::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorLog_Message::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ErrorLog_Message.userId)
}
inline void ErrorLog_Message::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ErrorLog_Message.userId)
}
inline void ErrorLog_Message::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ErrorLog_Message.userId)
}
inline std::string* ErrorLog_Message::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorLog_Message::release_userid() {
  // @@protoc_insertion_point(field_release:ErrorLog_Message.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorLog_Message::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ErrorLog_Message.userId)
}
inline std::string* ErrorLog_Message::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ErrorLog_Message.userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorLog_Message::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ErrorLog_Message.userId)
}

// string component = 2;
inline void ErrorLog_Message::clear_component() {
  component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorLog_Message::component() const {
  // @@protoc_insertion_point(field_get:ErrorLog_Message.component)
  return _internal_component();
}
inline void ErrorLog_Message::set_component(const std::string& value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:ErrorLog_Message.component)
}
inline std::string* ErrorLog_Message::mutable_component() {
  // @@protoc_insertion_point(field_mutable:ErrorLog_Message.component)
  return _internal_mutable_component();
}
inline const std::string& ErrorLog_Message::_internal_component() const {
  return component_.Get();
}
inline void ErrorLog_Message::_internal_set_component(const std::string& value) {
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorLog_Message::set_component(std::string&& value) {
  
  component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ErrorLog_Message.component)
}
inline void ErrorLog_Message::set_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ErrorLog_Message.component)
}
inline void ErrorLog_Message::set_component(const char* value,
    size_t size) {
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ErrorLog_Message.component)
}
inline std::string* ErrorLog_Message::_internal_mutable_component() {
  
  return component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorLog_Message::release_component() {
  // @@protoc_insertion_point(field_release:ErrorLog_Message.component)
  return component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorLog_Message::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ErrorLog_Message.component)
}
inline std::string* ErrorLog_Message::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ErrorLog_Message.component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorLog_Message::unsafe_arena_set_allocated_component(
    std::string* component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component != nullptr) {
    
  } else {
    
  }
  component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ErrorLog_Message.component)
}

// string errorMsg = 3;
inline void ErrorLog_Message::clear_errormsg() {
  errormsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorLog_Message::errormsg() const {
  // @@protoc_insertion_point(field_get:ErrorLog_Message.errorMsg)
  return _internal_errormsg();
}
inline void ErrorLog_Message::set_errormsg(const std::string& value) {
  _internal_set_errormsg(value);
  // @@protoc_insertion_point(field_set:ErrorLog_Message.errorMsg)
}
inline std::string* ErrorLog_Message::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:ErrorLog_Message.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& ErrorLog_Message::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void ErrorLog_Message::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorLog_Message::set_errormsg(std::string&& value) {
  
  errormsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ErrorLog_Message.errorMsg)
}
inline void ErrorLog_Message::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ErrorLog_Message.errorMsg)
}
inline void ErrorLog_Message::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ErrorLog_Message.errorMsg)
}
inline std::string* ErrorLog_Message::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorLog_Message::release_errormsg() {
  // @@protoc_insertion_point(field_release:ErrorLog_Message.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorLog_Message::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ErrorLog_Message.errorMsg)
}
inline std::string* ErrorLog_Message::unsafe_arena_release_errormsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ErrorLog_Message.errorMsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errormsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorLog_Message::unsafe_arena_set_allocated_errormsg(
    std::string* errormsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errormsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ErrorLog_Message.errorMsg)
}

// string context = 4;
inline void ErrorLog_Message::clear_context() {
  context_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorLog_Message::context() const {
  // @@protoc_insertion_point(field_get:ErrorLog_Message.context)
  return _internal_context();
}
inline void ErrorLog_Message::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:ErrorLog_Message.context)
}
inline std::string* ErrorLog_Message::mutable_context() {
  // @@protoc_insertion_point(field_mutable:ErrorLog_Message.context)
  return _internal_mutable_context();
}
inline const std::string& ErrorLog_Message::_internal_context() const {
  return context_.Get();
}
inline void ErrorLog_Message::_internal_set_context(const std::string& value) {
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorLog_Message::set_context(std::string&& value) {
  
  context_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ErrorLog_Message.context)
}
inline void ErrorLog_Message::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ErrorLog_Message.context)
}
inline void ErrorLog_Message::set_context(const char* value,
    size_t size) {
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ErrorLog_Message.context)
}
inline std::string* ErrorLog_Message::_internal_mutable_context() {
  
  return context_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorLog_Message::release_context() {
  // @@protoc_insertion_point(field_release:ErrorLog_Message.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorLog_Message::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ErrorLog_Message.context)
}
inline std::string* ErrorLog_Message::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ErrorLog_Message.context)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return context_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorLog_Message::unsafe_arena_set_allocated_context(
    std::string* context) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (context != nullptr) {
    
  } else {
    
  }
  context_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      context, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ErrorLog_Message.context)
}

// string values = 5;
inline void ErrorLog_Message::clear_values() {
  values_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorLog_Message::values() const {
  // @@protoc_insertion_point(field_get:ErrorLog_Message.values)
  return _internal_values();
}
inline void ErrorLog_Message::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:ErrorLog_Message.values)
}
inline std::string* ErrorLog_Message::mutable_values() {
  // @@protoc_insertion_point(field_mutable:ErrorLog_Message.values)
  return _internal_mutable_values();
}
inline const std::string& ErrorLog_Message::_internal_values() const {
  return values_.Get();
}
inline void ErrorLog_Message::_internal_set_values(const std::string& value) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorLog_Message::set_values(std::string&& value) {
  
  values_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ErrorLog_Message.values)
}
inline void ErrorLog_Message::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ErrorLog_Message.values)
}
inline void ErrorLog_Message::set_values(const char* value,
    size_t size) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ErrorLog_Message.values)
}
inline std::string* ErrorLog_Message::_internal_mutable_values() {
  
  return values_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorLog_Message::release_values() {
  // @@protoc_insertion_point(field_release:ErrorLog_Message.values)
  return values_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorLog_Message::set_allocated_values(std::string* values) {
  if (values != nullptr) {
    
  } else {
    
  }
  values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ErrorLog_Message.values)
}
inline std::string* ErrorLog_Message::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ErrorLog_Message.values)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return values_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorLog_Message::unsafe_arena_set_allocated_values(
    std::string* values) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (values != nullptr) {
    
  } else {
    
  }
  values_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      values, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ErrorLog_Message.values)
}

// -------------------------------------------------------------------

// AuditLog_Message

// string userId = 1;
inline void AuditLog_Message::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuditLog_Message::userid() const {
  // @@protoc_insertion_point(field_get:AuditLog_Message.userId)
  return _internal_userid();
}
inline void AuditLog_Message::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:AuditLog_Message.userId)
}
inline std::string* AuditLog_Message::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:AuditLog_Message.userId)
  return _internal_mutable_userid();
}
inline const std::string& AuditLog_Message::_internal_userid() const {
  return userid_.Get();
}
inline void AuditLog_Message::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuditLog_Message::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AuditLog_Message.userId)
}
inline void AuditLog_Message::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AuditLog_Message.userId)
}
inline void AuditLog_Message::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AuditLog_Message.userId)
}
inline std::string* AuditLog_Message::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuditLog_Message::release_userid() {
  // @@protoc_insertion_point(field_release:AuditLog_Message.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditLog_Message::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AuditLog_Message.userId)
}
inline std::string* AuditLog_Message::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AuditLog_Message.userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuditLog_Message::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AuditLog_Message.userId)
}

// string component = 2;
inline void AuditLog_Message::clear_component() {
  component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuditLog_Message::component() const {
  // @@protoc_insertion_point(field_get:AuditLog_Message.component)
  return _internal_component();
}
inline void AuditLog_Message::set_component(const std::string& value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:AuditLog_Message.component)
}
inline std::string* AuditLog_Message::mutable_component() {
  // @@protoc_insertion_point(field_mutable:AuditLog_Message.component)
  return _internal_mutable_component();
}
inline const std::string& AuditLog_Message::_internal_component() const {
  return component_.Get();
}
inline void AuditLog_Message::_internal_set_component(const std::string& value) {
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuditLog_Message::set_component(std::string&& value) {
  
  component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AuditLog_Message.component)
}
inline void AuditLog_Message::set_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AuditLog_Message.component)
}
inline void AuditLog_Message::set_component(const char* value,
    size_t size) {
  
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AuditLog_Message.component)
}
inline std::string* AuditLog_Message::_internal_mutable_component() {
  
  return component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuditLog_Message::release_component() {
  // @@protoc_insertion_point(field_release:AuditLog_Message.component)
  return component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditLog_Message::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AuditLog_Message.component)
}
inline std::string* AuditLog_Message::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AuditLog_Message.component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuditLog_Message::unsafe_arena_set_allocated_component(
    std::string* component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component != nullptr) {
    
  } else {
    
  }
  component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AuditLog_Message.component)
}

// string endpoint = 3;
inline void AuditLog_Message::clear_endpoint() {
  endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuditLog_Message::endpoint() const {
  // @@protoc_insertion_point(field_get:AuditLog_Message.endpoint)
  return _internal_endpoint();
}
inline void AuditLog_Message::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:AuditLog_Message.endpoint)
}
inline std::string* AuditLog_Message::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:AuditLog_Message.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& AuditLog_Message::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void AuditLog_Message::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuditLog_Message::set_endpoint(std::string&& value) {
  
  endpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AuditLog_Message.endpoint)
}
inline void AuditLog_Message::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AuditLog_Message.endpoint)
}
inline void AuditLog_Message::set_endpoint(const char* value,
    size_t size) {
  
  endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AuditLog_Message.endpoint)
}
inline std::string* AuditLog_Message::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuditLog_Message::release_endpoint() {
  // @@protoc_insertion_point(field_release:AuditLog_Message.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditLog_Message::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AuditLog_Message.endpoint)
}
inline std::string* AuditLog_Message::unsafe_arena_release_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AuditLog_Message.endpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuditLog_Message::unsafe_arena_set_allocated_endpoint(
    std::string* endpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AuditLog_Message.endpoint)
}

// string type = 4;
inline void AuditLog_Message::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuditLog_Message::type() const {
  // @@protoc_insertion_point(field_get:AuditLog_Message.type)
  return _internal_type();
}
inline void AuditLog_Message::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AuditLog_Message.type)
}
inline std::string* AuditLog_Message::mutable_type() {
  // @@protoc_insertion_point(field_mutable:AuditLog_Message.type)
  return _internal_mutable_type();
}
inline const std::string& AuditLog_Message::_internal_type() const {
  return type_.Get();
}
inline void AuditLog_Message::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuditLog_Message::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AuditLog_Message.type)
}
inline void AuditLog_Message::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AuditLog_Message.type)
}
inline void AuditLog_Message::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AuditLog_Message.type)
}
inline std::string* AuditLog_Message::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuditLog_Message::release_type() {
  // @@protoc_insertion_point(field_release:AuditLog_Message.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuditLog_Message::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AuditLog_Message.type)
}
inline std::string* AuditLog_Message::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AuditLog_Message.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuditLog_Message::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AuditLog_Message.type)
}

// -------------------------------------------------------------------

// ClusterSnapshotPull_Message

// string location = 1;
inline void ClusterSnapshotPull_Message::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClusterSnapshotPull_Message::location() const {
  // @@protoc_insertion_point(field_get:ClusterSnapshotPull_Message.location)
  return _internal_location();
}
inline void ClusterSnapshotPull_Message::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:ClusterSnapshotPull_Message.location)
}
inline std::string* ClusterSnapshotPull_Message::mutable_location() {
  // @@protoc_insertion_point(field_mutable:ClusterSnapshotPull_Message.location)
  return _internal_mutable_location();
}
inline const std::string& ClusterSnapshotPull_Message::_internal_location() const {
  return location_.Get();
}
inline void ClusterSnapshotPull_Message::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClusterSnapshotPull_Message::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClusterSnapshotPull_Message.location)
}
inline void ClusterSnapshotPull_Message::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClusterSnapshotPull_Message.location)
}
inline void ClusterSnapshotPull_Message::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClusterSnapshotPull_Message.location)
}
inline std::string* ClusterSnapshotPull_Message::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClusterSnapshotPull_Message::release_location() {
  // @@protoc_insertion_point(field_release:ClusterSnapshotPull_Message.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClusterSnapshotPull_Message::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClusterSnapshotPull_Message.location)
}
inline std::string* ClusterSnapshotPull_Message::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClusterSnapshotPull_Message.location)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClusterSnapshotPull_Message::unsafe_arena_set_allocated_location(
    std::string* location) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (location != nullptr) {
    
  } else {
    
  }
  location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      location, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClusterSnapshotPull_Message.location)
}

// -------------------------------------------------------------------

// DatasetRequest_Message

// string location = 1;
inline void DatasetRequest_Message::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetRequest_Message::location() const {
  // @@protoc_insertion_point(field_get:DatasetRequest_Message.location)
  return _internal_location();
}
inline void DatasetRequest_Message::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:DatasetRequest_Message.location)
}
inline std::string* DatasetRequest_Message::mutable_location() {
  // @@protoc_insertion_point(field_mutable:DatasetRequest_Message.location)
  return _internal_mutable_location();
}
inline const std::string& DatasetRequest_Message::_internal_location() const {
  return location_.Get();
}
inline void DatasetRequest_Message::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetRequest_Message::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetRequest_Message.location)
}
inline void DatasetRequest_Message::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetRequest_Message.location)
}
inline void DatasetRequest_Message::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetRequest_Message.location)
}
inline std::string* DatasetRequest_Message::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetRequest_Message::release_location() {
  // @@protoc_insertion_point(field_release:DatasetRequest_Message.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetRequest_Message::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetRequest_Message.location)
}
inline std::string* DatasetRequest_Message::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatasetRequest_Message.location)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DatasetRequest_Message::unsafe_arena_set_allocated_location(
    std::string* location) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (location != nullptr) {
    
  } else {
    
  }
  location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      location, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatasetRequest_Message.location)
}

// string columnName = 2;
inline void DatasetRequest_Message::clear_columnname() {
  columnname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DatasetRequest_Message::columnname() const {
  // @@protoc_insertion_point(field_get:DatasetRequest_Message.columnName)
  return _internal_columnname();
}
inline void DatasetRequest_Message::set_columnname(const std::string& value) {
  _internal_set_columnname(value);
  // @@protoc_insertion_point(field_set:DatasetRequest_Message.columnName)
}
inline std::string* DatasetRequest_Message::mutable_columnname() {
  // @@protoc_insertion_point(field_mutable:DatasetRequest_Message.columnName)
  return _internal_mutable_columnname();
}
inline const std::string& DatasetRequest_Message::_internal_columnname() const {
  return columnname_.Get();
}
inline void DatasetRequest_Message::_internal_set_columnname(const std::string& value) {
  
  columnname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatasetRequest_Message::set_columnname(std::string&& value) {
  
  columnname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DatasetRequest_Message.columnName)
}
inline void DatasetRequest_Message::set_columnname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  columnname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DatasetRequest_Message.columnName)
}
inline void DatasetRequest_Message::set_columnname(const char* value,
    size_t size) {
  
  columnname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DatasetRequest_Message.columnName)
}
inline std::string* DatasetRequest_Message::_internal_mutable_columnname() {
  
  return columnname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatasetRequest_Message::release_columnname() {
  // @@protoc_insertion_point(field_release:DatasetRequest_Message.columnName)
  return columnname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatasetRequest_Message::set_allocated_columnname(std::string* columnname) {
  if (columnname != nullptr) {
    
  } else {
    
  }
  columnname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columnname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DatasetRequest_Message.columnName)
}
inline std::string* DatasetRequest_Message::unsafe_arena_release_columnname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DatasetRequest_Message.columnName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return columnname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DatasetRequest_Message::unsafe_arena_set_allocated_columnname(
    std::string* columnname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (columnname != nullptr) {
    
  } else {
    
  }
  columnname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      columnname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DatasetRequest_Message.columnName)
}

// -------------------------------------------------------------------

// ResultPush_Message

// string uuid = 1;
inline void ResultPush_Message::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultPush_Message::uuid() const {
  // @@protoc_insertion_point(field_get:ResultPush_Message.uuid)
  return _internal_uuid();
}
inline void ResultPush_Message::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ResultPush_Message.uuid)
}
inline std::string* ResultPush_Message::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ResultPush_Message.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ResultPush_Message::_internal_uuid() const {
  return uuid_.Get();
}
inline void ResultPush_Message::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultPush_Message::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResultPush_Message.uuid)
}
inline void ResultPush_Message::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ResultPush_Message.uuid)
}
inline void ResultPush_Message::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResultPush_Message.uuid)
}
inline std::string* ResultPush_Message::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultPush_Message::release_uuid() {
  // @@protoc_insertion_point(field_release:ResultPush_Message.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultPush_Message::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResultPush_Message.uuid)
}
inline std::string* ResultPush_Message::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResultPush_Message.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultPush_Message::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultPush_Message.uuid)
}

// string name = 2;
inline void ResultPush_Message::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultPush_Message::name() const {
  // @@protoc_insertion_point(field_get:ResultPush_Message.name)
  return _internal_name();
}
inline void ResultPush_Message::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ResultPush_Message.name)
}
inline std::string* ResultPush_Message::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ResultPush_Message.name)
  return _internal_mutable_name();
}
inline const std::string& ResultPush_Message::_internal_name() const {
  return name_.Get();
}
inline void ResultPush_Message::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultPush_Message::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResultPush_Message.name)
}
inline void ResultPush_Message::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ResultPush_Message.name)
}
inline void ResultPush_Message::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResultPush_Message.name)
}
inline std::string* ResultPush_Message::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultPush_Message::release_name() {
  // @@protoc_insertion_point(field_release:ResultPush_Message.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultPush_Message::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResultPush_Message.name)
}
inline std::string* ResultPush_Message::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResultPush_Message.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultPush_Message::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultPush_Message.name)
}

// string userId = 3;
inline void ResultPush_Message::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultPush_Message::userid() const {
  // @@protoc_insertion_point(field_get:ResultPush_Message.userId)
  return _internal_userid();
}
inline void ResultPush_Message::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ResultPush_Message.userId)
}
inline std::string* ResultPush_Message::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:ResultPush_Message.userId)
  return _internal_mutable_userid();
}
inline const std::string& ResultPush_Message::_internal_userid() const {
  return userid_.Get();
}
inline void ResultPush_Message::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultPush_Message::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResultPush_Message.userId)
}
inline void ResultPush_Message::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ResultPush_Message.userId)
}
inline void ResultPush_Message::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResultPush_Message.userId)
}
inline std::string* ResultPush_Message::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultPush_Message::release_userid() {
  // @@protoc_insertion_point(field_release:ResultPush_Message.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultPush_Message::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResultPush_Message.userId)
}
inline std::string* ResultPush_Message::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResultPush_Message.userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultPush_Message::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultPush_Message.userId)
}

// string projectId = 4;
inline void ResultPush_Message::clear_projectid() {
  projectid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultPush_Message::projectid() const {
  // @@protoc_insertion_point(field_get:ResultPush_Message.projectId)
  return _internal_projectid();
}
inline void ResultPush_Message::set_projectid(const std::string& value) {
  _internal_set_projectid(value);
  // @@protoc_insertion_point(field_set:ResultPush_Message.projectId)
}
inline std::string* ResultPush_Message::mutable_projectid() {
  // @@protoc_insertion_point(field_mutable:ResultPush_Message.projectId)
  return _internal_mutable_projectid();
}
inline const std::string& ResultPush_Message::_internal_projectid() const {
  return projectid_.Get();
}
inline void ResultPush_Message::_internal_set_projectid(const std::string& value) {
  
  projectid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultPush_Message::set_projectid(std::string&& value) {
  
  projectid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResultPush_Message.projectId)
}
inline void ResultPush_Message::set_projectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  projectid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ResultPush_Message.projectId)
}
inline void ResultPush_Message::set_projectid(const char* value,
    size_t size) {
  
  projectid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResultPush_Message.projectId)
}
inline std::string* ResultPush_Message::_internal_mutable_projectid() {
  
  return projectid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultPush_Message::release_projectid() {
  // @@protoc_insertion_point(field_release:ResultPush_Message.projectId)
  return projectid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultPush_Message::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    
  } else {
    
  }
  projectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projectid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResultPush_Message.projectId)
}
inline std::string* ResultPush_Message::unsafe_arena_release_projectid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResultPush_Message.projectId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return projectid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultPush_Message::unsafe_arena_set_allocated_projectid(
    std::string* projectid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (projectid != nullptr) {
    
  } else {
    
  }
  projectid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      projectid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultPush_Message.projectId)
}

// string results = 5;
inline void ResultPush_Message::clear_results() {
  results_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultPush_Message::results() const {
  // @@protoc_insertion_point(field_get:ResultPush_Message.results)
  return _internal_results();
}
inline void ResultPush_Message::set_results(const std::string& value) {
  _internal_set_results(value);
  // @@protoc_insertion_point(field_set:ResultPush_Message.results)
}
inline std::string* ResultPush_Message::mutable_results() {
  // @@protoc_insertion_point(field_mutable:ResultPush_Message.results)
  return _internal_mutable_results();
}
inline const std::string& ResultPush_Message::_internal_results() const {
  return results_.Get();
}
inline void ResultPush_Message::_internal_set_results(const std::string& value) {
  
  results_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultPush_Message::set_results(std::string&& value) {
  
  results_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ResultPush_Message.results)
}
inline void ResultPush_Message::set_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  results_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ResultPush_Message.results)
}
inline void ResultPush_Message::set_results(const char* value,
    size_t size) {
  
  results_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ResultPush_Message.results)
}
inline std::string* ResultPush_Message::_internal_mutable_results() {
  
  return results_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultPush_Message::release_results() {
  // @@protoc_insertion_point(field_release:ResultPush_Message.results)
  return results_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultPush_Message::set_allocated_results(std::string* results) {
  if (results != nullptr) {
    
  } else {
    
  }
  results_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), results,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ResultPush_Message.results)
}
inline std::string* ResultPush_Message::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ResultPush_Message.results)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return results_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultPush_Message::unsafe_arena_set_allocated_results(
    std::string* results) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (results != nullptr) {
    
  } else {
    
  }
  results_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      results, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResultPush_Message.results)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UploadDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UploadDataType>() {
  return ::UploadDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shiori_5fmessages_2eproto3
