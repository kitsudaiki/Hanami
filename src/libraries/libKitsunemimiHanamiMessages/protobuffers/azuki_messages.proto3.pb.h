// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: azuki_messages.proto3

#ifndef GOOGLE_PROTOBUF_INCLUDED_azuki_5fmessages_2eproto3
#define GOOGLE_PROTOBUF_INCLUDED_azuki_5fmessages_2eproto3

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_azuki_5fmessages_2eproto3
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_azuki_5fmessages_2eproto3 {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_azuki_5fmessages_2eproto3;
class SetCpuSpeed_Message;
class SetCpuSpeed_MessageDefaultTypeInternal;
extern SetCpuSpeed_MessageDefaultTypeInternal _SetCpuSpeed_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SetCpuSpeed_Message* Arena::CreateMaybeMessage<::SetCpuSpeed_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SpeedState : int {
  MINIMUM_SPEED = 0,
  AUTOMATIC_SPEED = 1,
  MAXIMUM_SPEED = 2,
  SpeedState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpeedState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpeedState_IsValid(int value);
constexpr SpeedState SpeedState_MIN = MINIMUM_SPEED;
constexpr SpeedState SpeedState_MAX = MAXIMUM_SPEED;
constexpr int SpeedState_ARRAYSIZE = SpeedState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpeedState_descriptor();
template<typename T>
inline const std::string& SpeedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpeedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpeedState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpeedState_descriptor(), enum_t_value);
}
inline bool SpeedState_Parse(
    const std::string& name, SpeedState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpeedState>(
    SpeedState_descriptor(), name, value);
}
// ===================================================================

class SetCpuSpeed_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetCpuSpeed_Message) */ {
 public:
  inline SetCpuSpeed_Message() : SetCpuSpeed_Message(nullptr) {};
  virtual ~SetCpuSpeed_Message();

  SetCpuSpeed_Message(const SetCpuSpeed_Message& from);
  SetCpuSpeed_Message(SetCpuSpeed_Message&& from) noexcept
    : SetCpuSpeed_Message() {
    *this = ::std::move(from);
  }

  inline SetCpuSpeed_Message& operator=(const SetCpuSpeed_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCpuSpeed_Message& operator=(SetCpuSpeed_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCpuSpeed_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCpuSpeed_Message* internal_default_instance() {
    return reinterpret_cast<const SetCpuSpeed_Message*>(
               &_SetCpuSpeed_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetCpuSpeed_Message& a, SetCpuSpeed_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCpuSpeed_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCpuSpeed_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCpuSpeed_Message* New() const final {
    return CreateMaybeMessage<SetCpuSpeed_Message>(nullptr);
  }

  SetCpuSpeed_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCpuSpeed_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCpuSpeed_Message& from);
  void MergeFrom(const SetCpuSpeed_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCpuSpeed_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetCpuSpeed_Message";
  }
  protected:
  explicit SetCpuSpeed_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_azuki_5fmessages_2eproto3);
    return ::descriptor_table_azuki_5fmessages_2eproto3.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .SpeedState type = 1;
  void clear_type();
  ::SpeedState type() const;
  void set_type(::SpeedState value);
  private:
  ::SpeedState _internal_type() const;
  void _internal_set_type(::SpeedState value);
  public:

  // @@protoc_insertion_point(class_scope:SetCpuSpeed_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_azuki_5fmessages_2eproto3;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetCpuSpeed_Message

// .SpeedState type = 1;
inline void SetCpuSpeed_Message::clear_type() {
  type_ = 0;
}
inline ::SpeedState SetCpuSpeed_Message::_internal_type() const {
  return static_cast< ::SpeedState >(type_);
}
inline ::SpeedState SetCpuSpeed_Message::type() const {
  // @@protoc_insertion_point(field_get:SetCpuSpeed_Message.type)
  return _internal_type();
}
inline void SetCpuSpeed_Message::_internal_set_type(::SpeedState value) {
  
  type_ = value;
}
inline void SetCpuSpeed_Message::set_type(::SpeedState value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SetCpuSpeed_Message.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SpeedState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SpeedState>() {
  return ::SpeedState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_azuki_5fmessages_2eproto3
